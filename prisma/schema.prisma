generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  session       Session[]
  comment       Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  user_id           Int?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          Int        @id @default(autoincrement())
  handle      String     @unique
  title       String
  price       Float
  discount    Float
  description String?
  quantity    Int
  rating      Float
  categoryId  Int
  createdAt   DateTime   @default(now())
  category    Category   @relation(fields: [categoryId], references: [id])
  imageUrl    ImageUrl[]
  comments    Comment[]

  @@map("products")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  String
  productId Int
  rating    Float    @default(0)
  createdAt DateTime @default(now())

  author  User    @relation(fields: [authorId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model ImageUrl {
  id        Int    @id @default(autoincrement())
  url       String
  productId Int

  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model SliderNews {
  id String @id @default(cuid())
  
}
